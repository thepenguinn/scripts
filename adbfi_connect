#!/system/xbin/bash

ipaddr="192.168.43.35"
portid="Not Specified"
main_extra_len=0
unset chosen
unset prcode

stty -echo
printf "\033[?25l"

trap "printf '\n\033[?25h\033[0m' && stty echo && stty sane  && exit" EXIT
trap "printf '\n\033[?25h\033[0m' && stty echo && stty sane && exit" SIGINT

invalid_input () {
	printf "\n\033[31;1m Invalid Input. \033[0mPick one above."
	sleep 2
	printf "\033[2F\033[11C\033[0J"
}

read_input () {
	printf "\033[?25h"
	stty echo
	read -r chosen 
	printf "\033[?25l"
	stty -echo
}

print_info () {
	printf "\033[0m\033[1;30m"
	printf "%.0s─" {1..37}
	printf "\n"
	printf "\033[32m IP Addr\033[0m: \033[33;1m$ipaddr\n"
	printf "\033[0m\033[1;32m Port ID\033[0m: \033[33;1m$portid\n"
	printf "\033[0m\033[1;30m"
	printf "%.0s─" {1..37}
	printf "\n\n"
}

invalid_port () {
	printf "\n\033[31;1m Invalid Port ID. \033[0mSould be 5 digit long numeral."
	sleep 2
	printf "\033[2F\033[12C\033[0J"
}

get_port () {
	printf "\033[0m  \033[1mx \033[0m-─ \033[30;1mGo Back\n\n"
	printf "\033[0m "
	printf "[\033[1mPORT ID\033[0m]: "
	read_input
	validate () {
		if [[ $chosen =~ ^[0-9]{5}$ ]]; then
			portid=$chosen
			printf "\033[8F\033[0J"
			print_info
		elif [[ $chosen == "x" ]]; then
			printf "\033[3F\033[0J"
		else
			invalid_port
			read_input
			validate
		fi
	}
	validate
}

invalid_ip () {
	printf "\n\033[31;1m Invalid Ip Address. \033[0mTry Again."
	sleep 2
	printf "\033[2F\033[12C\033[0J"
}

get_ip () {
	printf "\033[0m  \033[1mx \033[0m-─ \033[30;1mGo Back\n\n"
	printf "\033[0m "
	printf "[\033[1mIP ADDR\033[0m]: "
	read_input
	validate () {
		if [[ $chosen =~ ^([0-9]{1,3}[\.]){3}[0-9]{1,3}$ ]]; then
			ipaddr=$chosen
			printf "\033[8F\033[0J"
			print_info
		elif [[ $chosen == "x" ]]; then
			printf "\033[3F\033[0J"
		else
			invalid_ip
			read_input
			validate
		fi
	}
	validate
}

invalid_code () {
	printf "\n\033[31;1m Invalid Pairing Code. \033[0mSould be 6 digit long numeral."
	sleep 2
	printf "\033[2F\033[12C\033[0J"
}

get_code () {
	printf "\033[0m  \033[1mx \033[0m-─ \033[30;1mGo Back\n\n"
	printf "\033[0m "
	printf "[\033[1mPAIRING CODE\033[0m]: "
	read_input
	validate () {
		if [[ $chosen =~ ^[0-9]{6}$ ]]; then
			prcode=$chosen
			printf "\033[8F\033[0J"
			print_info
			return 0
		elif [[ $chosen == "x" ]]; then
			printf "\033[3F\033[0J"
			return 1
		else
			invalid_code
			read_input
			validate
		fi
	}
	validate
}

connect_device () {
	printf "\033[35;1m Connecting to device...\n"
	local connect_log=$(adb connect $ipaddr:$portid 2>/dev/null)
	local reason=$(awk -F":" '{print $3}' <<<"$connect_log")
	if grep -o "connected" <<<"$connect_log" > /dev/null; then
		printf "\033[35;1m Connected to \033[33;1m$ipaddr\033[00m:\033[33;1m$portid"
		echo "export EX=\"$ipaddr:$portid\"" > /sdcard/.adfi
		exit 0
	else
		printf "\n\033[31;1m Failed to connect to \033[33;1m$ipaddr\033[00m:\033[33;1m$portid\n"
		printf " ~>$reason\n"
		sleep 2
		printf "\033[4F\033[0J"
	fi
}

pair_device () {
	printf "\033[35;1m Pairing device...\n"
	connect_log=$(adb pair $ipaddr:$portid $prcode 2>/dev/null)
	reason=$(awk -F":" '{print $2}' <<<"$connect_log")
	if grep -o "Successfully paired" <<<"$connect_log" > /dev/null; then
		printf "\033[35;1m Paired to \033[33;1m$ipaddr\033[00m:\033[33;1m$portid"
		exit 0
	else
		printf "\n\033[31;1m Failed to pair to \033[33;1m$ipaddr\033[00m:\033[33;1m$portid\n"
		printf " ~>$reason\n"
		sleep 2
		printf "\033[4F\033[0J"
	fi
}

main () {
	printf "\033[0m  \033[1mi \033[0m-─ \033[1mChange Ip\n"
	printf "\033[0m  \033[1mp \033[0m-─ \033[1mChange Port\n"
	printf "\033[0m  \033[1mx \033[0m-─ \033[30;1mExit\n"

	if [[ ! $portid == "Not Specified" ]]; then
		printf "\n\033[0m  \033[36;1ml \033[0m-─ \033[36;1mPair Device\n"
		printf "\033[0m  \033[35;1mc \033[0m-─ \033[35;1mConnect\n\n"
		main_extra_len=3
	else
		printf "\n"
	fi

	printf "\033[0m [\033[1mCHOICE\033[0m]: "
	printf "\n\033[1A\033[11C"
	read_input
	validate () {
		case $chosen in
			i)
				printf "\033[$((5+main_extra_len))F\033[0J"
				get_ip
				main
				;;
			p)
				printf "\033[$((5+main_extra_len))F\033[0J"
				get_port
				main
				;;
			x)
				exit 1
				;;
			*)
				if [[ $portid != "Not Specified" ]]; then
					case $chosen in
						c)
							printf "\033[$((5+main_extra_len))F\033[0J"
							connect_device
							main
							;;
						l)
							printf "\033[$((5+main_extra_len))F\033[0J"
							[[ $portid = "Not Specified" ]] && get_port
							get_code && pair_device
							main
							;;
					esac
				else
					invalid_input
					read_input
					validate
				fi
				;;
		esac
	}
	validate
}

for i in "$@"
do
	argc=$((argc+1))
	if [[ $skiparg == 1 ]]; then
		case $i in
			-p)
				argc=$((argc+1))
				if [[ "${!argc}" =~ ^[0-9]{5}$ ]]; then
					portid="${!argc}"
					skiparg=1
				fi
				argc=$((argc-1))
				;;
			-i)
				argc=$((argc+1))
				if [[ "${!argc}" =~ ^([0-9]{1,3}[\.]){3}[0-9]{1,3}$ ]]; then
					ipaddr="${!argc}"
					skiparg=1
				fi
				argc=$((argc-1))
				;;
		esac
	else
		skiparg=0
	fi
done

print_info
if [[ $portid == "Not Specified" ]]; then
	get_port
fi
main

#!/bin/bash

unset dirs_for_syllabus
unset dirs_for_notes
unset gen_type
unset modified_time_new

check_indexfile () {
	local indexf="$(readlink -e "$1")"
	if [[ -f  "$indexf/index.norg" ]]; then
		return 0
	else
		printf "Couldn't find index.norg in the directory: \"$indexf/\" \nExiting...\n"
		exit 1
	fi
}

check_pre_comp_notes () {

	local nmodtime
	local lmodt_file

	lmodt_file="${1%/*}/ebook/lmodt_$(basename "$1" | sed "s/.norg$//")"
	nmodtime=$(stat --printf "%Y\n" "$1")
	if [[ -f "$lmodt_file" && "$nmodtime" -le $(cat "$lmodt_file") ]]; then
		return 0
	else
		modified_time_new+="$lmodt_file@$nmodtime"$'\n'
		return 1
	fi

}

check_pre_comp_syllabus_markdown () {

	local imodtime=""
	local norgfiles=$(find "$1" -iname syllabus*.norg)
	norgfiles+=$'\n'"$1/index.norg"


	while read -r file
	do
		imodtime+=$(stat --printf "%Y\n" "$file")$'\n'
	done <<<"$norgfiles"

	imodtime=$(sort <<<"$imodtime" | tail -n 1)

	if [[ -f "$1/ebook/lmodt_syllabus" && $imodtime -le $(cat "$1/ebook/lmodt_syllabus") ]]; then
		return 0
	else
		modified_time_new+="$1/ebook/lmodt_syllabus@$imodtime"$'\n'
		return 1
	fi
}

check_pre_comp_cover () {

	if [[ -f "${1}.png" && -f "${1}_title" ]]; then
		if [[ $2 == $(cat "${1}_title") ]]; then
			return 0
		fi
		modified_time_new+="${1}_title@$2"$'\n'
	fi
	return 1
}

gen_cover_img () {

	# First Arg --> Path to the norg file with the metadata for title
	# Second Arg --> Subtitle
	# Returns absoulute path to cover image.

	local dir=${1%/*}
	local tmpdir="$TMPDIR/epubconv"
	local font="$HOME/.fonts/FiraCode.ttf"
	local title

	mkdir "$tmpdir" > /dev/null 2>&1


	if ! check_pre_comp_cover "$dir/ebook/cover_$2" "$title"; then

		title=$(sed -n "/@document.meta/,/@end/{/^title: /{s/^title: //p}}" "$1")

		convert -background none -fill black -font "$font" -pointsize 65 -size 600x810 -gravity north caption:"$title" "$tmpdir/title.png"
		convert -background none -fill black -font "$font" -pointsize 65 -size 600x810 -gravity south caption:"$2" "$tmpdir/subtitle.png"
		convert -size 800x1080 xc:white "$tmpdir/back.png"
		composite -gravity center "$tmpdir/title.png" "$tmpdir/back.png" "$tmpdir/first.png"
		composite -gravity center "$tmpdir/subtitle.png" "$tmpdir/first.png" "$dir/ebook/cover_$2.png"

		modified_time_new+="$dir/ebook/cover_$2@$lmodtime"$'\n'
	fi

	readlink -e "$dir/ebook/cover_$2.png" 2> /dev/null
}

notes_ebook () {
	while read -r dir
	do
		echo $dir
	done <<<"$@"
}

gen_notes_ebook () {
	echo hai
}

gen_syllabus_markdown () {

	# First Arg --> Path to the directory that wants to be converted

	local dir=$(sed "s; ;\\\ ;" <<<"$1")

	nvim -R -c ":Neorg export directory $dir markdown $dir/ebook" -c "q" "$1/../index.norg" > /dev/null 2>&1

	[[ -d "$1/ebook" ]] || exit 1
}

gen_syllabus_epub () {

	# First Arg --> Path to the directory that wants to be converted

	local cover_img
	local md_files
	local epub_name

	epub_name=$(sed -n "/@document.meta/,/@end/{/^title: /{s/^title: //p}}" "$1/index.norg" | tr '[:upper:]' '[:lower:]' | tr " " _)

	cover_img=$(gen_cover_img "$1/index.norg" "syllabus")

	md_files=$(find "$1/ebook" -iname syllabus*.md | sort)

	sed -n "1,/---/p" "$1/ebook/index.md" > "$1/ebook/ebook.md"

	while read -r file
	do
		sed "1,/---/d" "$file" >> "$1/ebook/ebook.md"
	done <<<"$md_files"

	pandoc --epub-cover-image "$cover_img" -o "$1/${epub_name}_syllabus.epub" "$1/ebook/ebook.md"

}

syllabus_ebook () {

	local title

	while read -r dir
	do

		[[ -z $dir ]] && continue

		check_indexfile "$dir"

		title=$(sed -n "/@document.meta/,/@end/{/^title: /{s/^title: //p}}" "$dir/index.norg" | tr '[:upper:]' '[:lower:]' | tr " " _)

		if ! check_pre_comp_syllabus_markdown "$dir" ; then
			gen_syllabus_markdown "$dir"
			gen_syllabus_epub "$dir"
		elif [[ ! -f "$dir/$title.epub" ]]; then
			gen_syllabus_epub "$dir"
		fi

	done <<<"$@"
}

for arg in "$@"
do
	case $arg in 
		-s)
			gen_type=syllabus
			;;
		-n)
			gen_type=notes
			;;
		-sn|-ns)
			gen_type=""
			;;
		*)
			[[ -d $arg ]] || continue
			if [[ $gen_type == "syllabus" ]]; then
				dirs_for_syllabus+="${arg}"$'\n'
			elif [[ $gen_type == "notes" ]]; then
				dirs_for_notes+="${arg}"$'\n'
			elif [[ $gen_type == "" ]]; then
				dirs_for_syllabus+="${arg}"$'\n'
				dirs_for_notes+="${arg}"$'\n'
			fi
			;;
	esac
done

syllabus_ebook "${dirs_for_syllabus}"
#notes_ebook "${dirs_for_notes}"

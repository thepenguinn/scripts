#!/bin/bash

unset Meta
unset Artists
unset Title
unset Query
unset File
unset Selected

Exit_Status=0

unset Verbose
Modify=1
More_than_one_file=0

declare -a Given_files

Retro_dir="/sdcard/RetroMusic"
Music_dirs="/sdcard/Music/sdl:/sdcard/Music/NekoX:/sdcard/Music/NekoX/sunburn"

mkdir "${Retro_dir}/json" > /dev/null 2>&1
mkdir "${Retro_dir}/lyrics" > /dev/null 2>&1
mkdir "${Retro_dir}/plain" > /dev/null 2>&1

# mkdir -p "~/retromusic/json" > /dev/null 2>&1
# mkdir "~/retromusic/lyrics" > /dev/null 2>&1

verbose_log() {

    if [[ $Verbose == 1 ]]; then
        echo "${@}"
    fi

}

# First Arg --> path to the wfile
gen_meta() {

    Meta="$(id3ted -l "${1}")"

    if [[ -z "${Meta}" ]]; then
        verbose_log "No metadata"
        Exit_Status=1
        return
    fi

    if [[ -z "${Title}" ]]; then
        Title=$(grep "^TIT2: " <<<"${Meta}" | sed 's/^TIT2: //')
    fi

    if [[ -z "${Artists}" ]]; then
        Artists=$(grep "^TPE1: " <<<"${Meta}" | sed 's/^TPE1: //')
    fi

}

# First Arg --> Current Artists Second Arg --> File
clean_artists() {

    local cleaned_artists

    if grep "/" <<<"$1" > /dev/null ; then
        cleaned_artists="$(sed 's#/#,#g' <<<"$1")"
        id3ted --TPE1 "${cleaned_artists}" "$2"
    fi

}

gen_lrc() {

    local q_artists
    local q_title
    local response
    local synced
    local plain

    clean_artists "$Artists" "$File"
    Artists=$(tr "/" "," <<<"$Artists")

    if [[ -z "${Query}" ]]; then
        q_title="$(tr " " "+" <<<"$Title" | tr "â€˜" "'" | tr -d "\"")"
        q_artists="$(tr " " "+" <<<"$Artists" | tr -d "\"")"
        Query="${q_title}+${q_artists}"
    fi

    verbose_log "Querying for ${Title} - ${Artists}..."
    verbose_log "Query: ${Query}"
    response="$(curl -s "https://lrclib.net/api/search?q=${Query}")"

    if [[ "$response" =~ "[]" ]]; then
        verbose_log "No response"
        if [[ ! -z $q_title ]]; then
            verbose_log "querying with title"
            response="$(curl -s "https://lrclib.net/api/search?q=${q_title}")"
            if [[ "$response" =~ "[]" ]]; then
                verbose_log "Still No response"
                verbose_log "querying with title that has only alphabets"
                q_title="$(sed "s/[^A-Za-z+]//g" <<<"${q_title}")"
                response="$(curl -s "https://lrclib.net/api/search?q=${q_title}")"
                if [[ "$response" =~ "[]" ]]; then
                    Exit_Status=1
                    return
                fi
            fi
        else
            Exit_Status=1
            return
        fi
    fi

    # Android doesn't like '"' and ':'
    Title="$(tr "\"" " " <<<"$Title" | tr ":" " ")"
    Artists="$(tr "\"" " " <<<"$Artists" | tr ":" " ")"

    echo "{\"query\": {\"title\": \"${Title}\", \"artists\": \"${Artists}\", \"queryString\": \"${Query}\", \"file\": \"${File}\"}, \"response\": ${response} }" > "${Retro_dir}/json/${Title} - ${Artists}.json"

    synced="$(jq -r '[(.[] | select(.syncedLyrics != null))][0]["syncedLyrics"]' <<<"${response}" | sed "s/\] /\]/")"

    plain="$(jq -r '[(.[] | select(.plainLyrics != null))][0]["plainLyrics"]' <<<"${response}")"

    if [[ -z "$synced" ]]; then
        verbose_log "No synced"
        Exit_Status=1
    else
        printf "$synced\n" > "${Retro_dir}/lyrics/${Title} - ${Artists}.lrc"
        if [[ "$Modify" == 1 && ! -z "$File" ]]; then
            id3ted -d "#" --USLT "$(printf "$synced\n")#synced" "$File"
        fi
    fi

    if [[ -z "$plain" ]]; then
        verbose_log "No plain"
        Exit_Status=1
    else
        printf "$plain\n" > "${Retro_dir}/plain/${Title} - ${Artists}.txt"
        if [[ "$Modify" == 1 && ! -z "$File" ]]; then
            id3ted -d "#" --USLT "$(printf "$plain\n")#plain" "$File"
        fi
    fi

    # printf "$synced\n" > "~/retromusic/lyrics/${Title} - ${Artists}.lrc"

}

main() {

    File=$(readlink -e "${File}")

    if [[ -z "$File" ]]; then
        if [[ -z "$Artists" || -z "$Title" ]]; then
            verbose_log "No File"
            return 1
        fi
    fi

    if [[ -z "$Artists" || -z "$Title" ]]; then
        gen_meta "$File"
        if [[ "${1}" == "EXIT_ON_FAILURE" && "${Exit_Status}" == 1 ]]; then
            exit 1
        fi
    fi

    gen_lrc

}
while [ : ]
do
    [[ "${1}" == "" ]] && break
    case "${1}" in
        --title)
            shift 1
            Title="${1}"
            ;;
        --artists)
            shift 1
            Artists="${1}"
            ;;
        --query)
            shift 1
            Query="$(tr " " "+" <<<"${1}" | tr -d "\"")"
            ;;
        --verbose)
            Verbose=1
            ;;
        --do-not-modify)
            Modify=0
            ;;
        --files)
            More_than_one_file=1
            while [ : ]
            do
                shift 1
                if [[ ! -z "${1}" ]] && [[ ! "${1}" =~ ^--.* ]]; then
                    if [[ -f "${1}" ]]; then
                        Given_files+=( "${1}" )
                    fi
                else
                    if [[ "${1}" =~ ^--.* ]]; then
                        shift -1
                    fi
                    break
                fi

            done
            ;;
        *)
            File="${1}"
            ;;
    esac

    shift 1
done

if [[ "$More_than_one_file" == 1 ]]; then
    for line in "${Given_files[@]}"
    do
        File="${line}"
        unset Artists
        unset Title
        unset Query
        main
    done
    exit
fi

# if [[ -z "$Artists" && -z "$Title" && -z "$Query" && -z "$File" ]]; then
if [[ -z "$Artists" && -z "$Title" && -z "$File" ]]; then

    # TODO: clean this
    declare -a _Music_dir
    Files=""
    Selected=""

    idx=0
    while read -r dir
    do
        _Music_dir+=("$dir")
        Files+=$(ls --sort=time -1 "${dir}" | sed "s#^#$idx #")
        Files+=$'\n'
        idx=$((idx+1))
    done <<<"$(tr ":" "\n" <<<"$Music_dirs")"

    Selected=$(sed "\$d" <<<"$Files" | fzf -m --with-nth "2..")

    if [[ -z "$Selected" ]]; then
        echo "No selections were made, exiting..."
        exit
    fi

    while read -r line
    do
        idx=${line%% *}
        file=${line#* }

        File="${_Music_dir[$idx]}/${file}"
        main
        unset Artists
        unset Title
        unset Query
    done <<<"${Selected}"

    exit
fi

main "EXIT_ON_FAILURE"

exit $Exit_Status

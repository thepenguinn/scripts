#!/bin/bash

KINDLE_MAC_ADDR="f4:03:2a:d5:42:6c"
KINDLE_IP_ADDR=$(ip neigh | grep $KINDLE_MAC_ADDR | cut -d" " -f1)
KINDLE_HOME_DIR="/mnt/us/documents/"
SOURCE=""
TARGET=""

mk_dir=0
unset subcmd

no_kindle() {
	printf "Waiting for kindle to connect...\n"
	for i in $(seq 1 8)
	do
		KINDLE_IP_ADDR=$(ip neigh | grep $KINDLE_MAC_ADDR | cut -d" " -f1)
		# ip neigh could return kindle ip address even after kindle got disconnected after
		# once connecting, until resarting hotspot. Hence, KINDLE_IP_ADDR could contain
		# an invalid ip address, so dry running ssh with a 2 second timeout
		timeout 2 ssh -o StrictHostKeyChecking=no root@$KINDLE_IP_ADDR echo > /dev/null 2>&1 && printf "Ladies and Gentlemen, we got him...\n" && sleep 1 && return 0
		# if timeout spend 2 seconds, we are not sleeping
		# just to keep the wait close to 16 seconds...
		[[ $? != 124 ]] && sleep 2
	done
	printf "Couldn't find kindle...\n"
	printf "Bailing out...\n"
	exit 1
}

check_kindle () {
	# adding ssh key to ssh-agent if no ssh keys have been added.
	# we've only one ssh key... otherwise we need to check the specific key using
	# for kindle.
	ssh-add -l > /dev/null 2>&1 || ssh-add
	# checking whether ssh could connect to kindle otherwise calling no_kindle
	if timeout 2 ssh -o StrictHostKeyChecking=no root@$KINDLE_IP_ADDR echo > /dev/null 2>&1 ; then
		return 0
	fi
	return 1
}

usage() {
	printf "kdb [sub-command] [arguments]\n\n"
	printf "shell:\n"
	printf " kdb shell [command]\n"
	printf " runs the command, otherwise opens an ssh\n"
	printf " session if no commands are specified\n\n"
	printf "push:\n"
	printf " kdb push [source] [target]\n"
	printf " target path can be relative to KINDLE_HOME_DIR\n"
	printf " or an absolute path\n\n"
	printf "pull:\n"
	printf " kdb pull [source] [target]\n"
	printf " source path can be relative to KINDLE_HOME_DIR\n"
	printf " or an absolute path\n\n"
	printf "sync:\n"
	printf " kdb sync [local_dir] [remote_dir]\n"
	printf " takes two arguments local directory and remote\n"
	printf " directory which can be relative to KINDLE_HOME_DIR\n"
	printf " or an absolute one\n"
	printf "hall:\n"
	printf " kdb hall [arguments]\n"
	printf " 1 and 0 for enable and disable respectively\n"
	printf " stat or status for state of hall sensor\n"
	#printf ""
	exit 1
}

no_dir() {
	printf "Directory doesn't exist: \"$TARGET\"\n"
	printf "Do you want to create it[y/n]?: "
	read -r mk_dir
	[[ $mk_dir =~ ^[Yy] ]] && eval "ssh -o StrictHostKeyChecking=no root@$KINDLE_IP_ADDR \"(mkdir -p \\\"$TARGET\\\")\"" || exit 1
}

set_push_points() {
	for i in $(seq 1 $(($#-1)))
	do
		[[ ${!i} =~ ^-h|--help$ ]] && usage
		SOURCE+="\"${!i}\" "
	done
	if [[ ${!#} =~ ^/ ]]; then
		TARGET="${!#}"
	else
		TARGET="$KINDLE_HOME_DIR${!#}"
	fi
}

set_pull_points() {
	for i in $(seq 1 $(($#-1)))
	do
		[[ ${!i} =~ ^-h|--help$ ]] && usage
		if [[ ${!i} =~ ^/ ]]; then
			SOURCE+=" :\"${!i}\""
		else
			SOURCE+=" :\"$KINDLE_HOME_DIR${!i}\""
		fi
	done
	[[ ${!#} =~ ^-h|--help$ ]] && usage
	TARGET="${!#}"
}

kindle_push() {

	if ! check_kindle ; then
		no_kindle
	fi

	set_push_points "$@"

	if ! ssh -o StrictHostKeyChecking=no root@$KINDLE_IP_ADDR "([ -d $TARGET ])" ;then
		no_dir
	fi
	eval "rsync -rvuP -e \"ssh -o StrictHostKeyChecking=no\" "$SOURCE" root@$KINDLE_IP_ADDR:\"$TARGET\""

}

kindle_pull() {

	if ! check_kindle ; then
		no_kindle
	fi

	set_pull_points "$@"

	eval "rsync -rvuP -e \"ssh -o StrictHostKeyChecking=no\" root@$KINDLE_IP_ADDR$(sed s@^\ @@ <<<"$SOURCE") \"$TARGET\""

}

kindle_sync() {

	if ! check_kindle ; then
		no_kindle
	fi

	[[ $(($#-1)) -eq  2 ]] || usage
	SOURCE=${!2}
	if [[ ${!#} =~ ^/ ]]; then
		TARGET=${!#}
	else
		TARGET="$KINDLE_HOME_DIR${!#}"
	fi
	[[ $SOURCE =~ /$ ]] || SOURCE+="/"
	[[ $TARGET =~ /$ ]] || TARGET+="/"
	if ! ssh -o StrictHostKeyChecking=no root@$KINDLE_IP_ADDR "([ -d $TARGET ])" ;then
		no_dir
	fi
	rsync -rvuP -e "ssh -o StrictHostKeyChecking=no" ${SOURCE}* root@$KINDLE_IP_ADDR:$TARGET
	rsync -rvuP -e "ssh -o StrictHostKeyChecking=no" root@$KINDLE_IP_ADDR:${TARGET}* $SOURCE
}

kindle_shell() {

	if ! check_kindle ; then
		no_kindle
	fi

	if [[ ${#} == 0 ]]; then
		ssh -o StrictHostKeyChecking=no root@$KINDLE_IP_ADDR
	else
		ssh -o StrictHostKeyChecking=no root@$KINDLE_IP_ADDR "$@"
	fi

}

kindle_hall() {

	case $1 in
		1|0)
			eval "ssh -o StrictHostKeyChecking=no root@$KINDLE_IP_ADDR \"echo $1 > /sys/devices/soc0/rex_hall/hall_enable\""
			[[ $2 == 1 ]] && printf "Hall Sensor: Enabled\n" || printf "Hall Sensor: Disabled\n"
			;;
		stat|status)
			case $(ssh -o StrictHostKeyChecking=no root@$KINDLE_IP_ADDR cat /sys/devices/soc0/rex_hall/hall_enable) in
				1)
					printf "Hall Sensor: Enabled\n"
					;;
				0)
					printf "Hall Sensor: Disabled\n"
					;;
			esac
			;;

		*)
			usage
	esac
}

[[ $# == 0 ]] && usage

subcmd="$1"

shift
case "$subcmd" in
	push)
		kindle_push "$@"
		exit 0
		;;
	pull)
		kindle_pull "$@"
		exit 0
		;;
	shell)
		kindle_shell "$@"
		exit 0
		;;
	sync)
		kindle_sync "$@"
		exit 0
		;;
	hall)
		kindle_hall "$@"
		exit 0
		;;
	justcheck)
		check_kindle && exit 0 || exit 1
		;;
	*)
		usage
		;;
esac

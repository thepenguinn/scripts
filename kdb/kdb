#!/bin/bash

if [[ $KINDLE_MAC_ADDR == "" ]]; then
    printf "Its seems like KINDLE_MAC_ADDR has not been exported.\n"
    printf "Export it in your shell rc.\n"
    printf "Exiting...\n"
    exit 1
fi

Kindle_Mac_Addr="$KINDLE_MAC_ADDR"
Kindle_Ip_Adder=$(ip neigh | grep $Kindle_Mac_Addr | cut -d" " -f1)
# TODO: paths shouldn't end with /
Kindle_Home_Dir="/mnt/us/documents/"
Kindle_Scrn_Dir="/mnt/us/Koreader/screenshots"

Local_Kindle_Dir="$HOME/storage/shared/kindle"
Local_Home_Dir="${Local_Kindle_Dir}/home"

Source=""
Target=""

mk_dir=0
unset subcmd

no_kindle() {
	printf "Waiting for kindle to connect...\n"
	for i in $(seq 1 8)
	do
		Kindle_Ip_Adder=$(ip neigh | grep $Kindle_Mac_Addr | cut -d" " -f1)
		# ip neigh could return kindle ip address even after kindle got disconnected after
		# once connecting, until resarting hotspot. Hence, Kindle_Ip_Adder could contain
		# an invalid ip address, so dry running ssh with a 2 second timeout
		timeout 2 ssh -o StrictHostKeyChecking=no root@$Kindle_Ip_Adder echo > /dev/null 2>&1 && printf "Ladies and Gentlemen, we got him...\n" && sleep 1 && return 0
		# if timeout spend 2 seconds, we are not sleeping
		# just to keep the wait close to 16 seconds...
		[[ $? != 124 ]] && sleep 2
	done
	printf "Couldn't find kindle...\n"
	printf "Bailing out...\n"
	exit 1
}

check_kindle () {
	# adding ssh key to ssh-agent if no ssh keys have been added.
	# we've only one ssh key... otherwise we need to check the specific key using
	# for kindle.
	ssh-add -l | grep "root@localhost" > /dev/null 2>&1 || ssh-add
	# checking whether ssh could connect to kindle otherwise calling no_kindle
	if timeout 2 ssh -o StrictHostKeyChecking=no root@$Kindle_Ip_Adder echo > /dev/null 2>&1 ; then
		return 0
	fi
	return 1
}

usage() {
	printf "kdb [sub-command] [arguments]\n\n"
	printf "shell:\n"
	printf " kdb shell [command]\n"
	printf " runs the command, otherwise opens an ssh\n"
	printf " session if no commands are specified\n\n"
	printf "push:\n"
	printf " kdb push [source] [target]\n"
	printf " target path can be relative to Kindle_Home_Dir\n"
	printf " or an absolute path\n\n"
	printf "pull:\n"
	printf " kdb pull [source] [target]\n"
	printf " source path can be relative to Kindle_Home_Dir\n"
	printf " or an absolute path\n\n"
	printf "sync:\n"
	printf " kdb sync [local_dir] [remote_dir]\n"
	printf " takes two arguments local directory and remote\n"
	printf " directory which can be relative to Kindle_Home_Dir\n"
	printf " or an absolute one\n"
	printf "hall:\n"
	printf " kdb hall [arguments]\n"
	printf " 1 and 0 for enable and disable respectively\n"
	printf " stat or status for state of hall sensor\n"
	#printf ""
	exit 1
}

no_dir() {
	printf "Directory doesn't exist: \"$Target\"\n"
	printf "Do you want to create it[y/n]?: "
	read -r mk_dir
	[[ $mk_dir =~ ^[Yy] ]] && eval "ssh -o StrictHostKeyChecking=no root@$Kindle_Ip_Adder \"(mkdir -p \\\"$Target\\\")\"" || exit 1
}

set_push_points() {
	for i in $(seq 1 $(($#-1)))
	do
		[[ ${!i} =~ ^-h|--help$ ]] && usage
		Source+="\"${!i}\" "
	done
	if [[ ${!#} =~ ^/ ]]; then
		Target="${!#}"
	else
		Target="$Kindle_Home_Dir${!#}"
	fi
}

set_pull_points() {
	for i in $(seq 1 $(($#-1)))
	do
		[[ ${!i} =~ ^-h|--help$ ]] && usage
		if [[ ${!i} =~ ^/ ]]; then
			Source+=" :\"${!i}\""
		else
			Source+=" :\"$Kindle_Home_Dir${!i}\""
		fi
	done
	[[ ${!#} =~ ^-h|--help$ ]] && usage
	Target="${!#}"
}

kindle_push() {

	if ! check_kindle ; then
		no_kindle
	fi

	set_push_points "$@"

	if ! ssh -o StrictHostKeyChecking=no root@$Kindle_Ip_Adder "([ -d $Target ])" ;then
		no_dir
	fi
	eval "rsync -rvuP -e \"ssh -o StrictHostKeyChecking=no\" "$Source" root@$Kindle_Ip_Adder:\"$Target\""

}

kindle_pull() {

	if ! check_kindle ; then
		no_kindle
	fi

	set_pull_points "$@"

	eval "rsync -rvuP -e \"ssh -o StrictHostKeyChecking=no\" root@$Kindle_Ip_Adder$(sed s@^\ @@ <<<"$Source") \"$Target\""

}

kindle_sync() {

    # we don't need to check_kindle, because kindle_sync_screenshot already does it
    kindle_sync_screenshot

    # cleaning Source and Target set by kindle_sync_screenshot
    Source=""
    Target=""

	set_push_points "${Local_Home_Dir}/" "."

    # TODO: for now we won't be syncing *.sdr directories
    # if we want to sync the reading progress, we need to
    # sync these files

	eval "rsync -rvuP --exclude "*.sdr" -e \"ssh -o StrictHostKeyChecking=no\" "$Source" root@$Kindle_Ip_Adder:\"$Target\""

}

kindle_sync_screenshot() {

	if ! check_kindle ; then
		no_kindle
	fi

    local files_to_scan

	set_pull_points "$Kindle_Scrn_Dir" "$Local_Kindle_Dir"

    files_to_scan="$(eval "rsync -ruP --dry-run -e \"ssh -o StrictHostKeyChecking=no\" root@$Kindle_Ip_Adder$(sed s@^\ @@ <<<"$Source") \"$Target\"" | sed 1d | sed "s@^@${Local_Kindle_Dir}/@")"

    eval "rsync -rvuP -e \"ssh -o StrictHostKeyChecking=no\" root@$Kindle_Ip_Adder$(sed s@^\ @@ <<<"$Source") \"$Target\""

    if [[ ! -z "$files_to_scan" ]]; then
        termux-media-scan "$files_to_scan"
    fi

}

kindle_shell() {

	if ! check_kindle ; then
		no_kindle
	fi

	if [[ ${#} == 0 ]]; then
		ssh -o StrictHostKeyChecking=no root@$Kindle_Ip_Adder
	else
		ssh -o StrictHostKeyChecking=no root@$Kindle_Ip_Adder "$@"
	fi

}

kindle_hall() {

	case $1 in
		1|0)
			eval "ssh -o StrictHostKeyChecking=no root@$Kindle_Ip_Adder \"echo $1 > /sys/devices/soc0/rex_hall/hall_enable\""
			[[ $1 == 1 ]] && printf "Hall Sensor: Enabled\n" || printf "Hall Sensor: Disabled\n"
			;;
		stat|status)
			case $(ssh -o StrictHostKeyChecking=no root@$Kindle_Ip_Adder cat /sys/devices/soc0/rex_hall/hall_enable) in
				1)
					printf "Hall Sensor: Enabled\n"
					;;
				0)
					printf "Hall Sensor: Disabled\n"
					;;
			esac
			;;

		*)
			usage
	esac
}

[[ $# == 0 ]] && usage

subcmd="$1"

shift
case "$subcmd" in
	push)
		kindle_push "$@"
		exit 0
		;;
	pull)
		kindle_pull "$@"
		exit 0
		;;
	shell)
		kindle_shell "$@"
		exit 0
		;;
    scrn)
        kindle_sync_screenshot "$@"
        exit 0
        ;;
	sync)
		kindle_sync "$@"
		exit 0
		;;
	hall)
		kindle_hall "$@"
		exit 0
		;;
	justcheck)
		check_kindle && exit 0 || exit 1
		;;
	*)
		usage
		;;
esac

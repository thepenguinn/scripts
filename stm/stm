#!/bin/bash

unset HOTSPOT

connect() {
    # if [[ $1 == "h" ]]; then
    #     rish /data/local/tmp/bin/hotspot on
    # fi

    local af_mac_addr=$AF_MAC_ADDR
    local user_name=$AF_USER_NAME
    local af_ip_address
    local got_him=0

    ssh-add -l | grep "root@localhost" > /dev/null 2>&1 || ssh-add

	printf "Waiting for Samsung A50s to connect...\n"
	for i in $(seq 1 8)
	do
		af_ip_address=$(ip neigh | grep "${af_mac_addr}" | grep "\." | cut -d" " -f1)
		# ip neigh could return a50s's ip address even after a50s got disconnected after
		# once connecting, until resarting hotspot. Hence, af_ip_address could contain
		# an invalid ip address, so dry running ssh with a 2 second timeout
        if timeout 2 ssh -o StrictHostKeyChecking=no -p 8022 \
            $user_name@$af_ip_address echo > /dev/null 2>&1; then

            printf "Ladies and Gentlemen, we got him...\n"
            got_him=1
            break
        fi
		# if timeout spend 2 seconds, we are not sleeping
		# just to keep the wait close to 16 seconds...
		[[ $? != 124 ]] && sleep 2
	done

    if [[ $got_him == 0 ]]; then
        printf "Couldn't find Samsung A50s...\n"
        printf "Bailing out...\n"
        return 1
    elif [[ $got_him == 1 ]]; then
        command ssh -o StrictHostKeyChecking=no -p 8022 \
            "${user_name}@${af_ip_address}" -t tss utils:music
        return 0
    fi
}

clear

while true
do
    printf "\n\n Press Enter to connect to A50s: "
    read -r HOTSPOT
    connect ${HOTSPOT}
    reset
    clear
done

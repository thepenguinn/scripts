#!/bin/bash

Work_Dirs="$HOME/projects:$HOME/projects/scripts:$HOME/fun:$HOME/projects/dotfiles:$HOME/notes"

declare -A Session_Suffix_Table

Session_Suffix_Table+=( \
    ["projects.scripts"]="srp" \
    ["projects"]="prj" \
    ["fun"]="fun" \
    ["notes"]="nts" \
    ["projects.dotfiles"]="dot" \
)

create_general_session () {
    if ! tmux has-session -t general 2>/dev/null; then
        tmux new-session -ds general
        tmux new-window -t general
        tmux new-window -t general
        tmux send-keys -t general:2 "w3m duckduckgo.com" Enter
    fi
}

# first arg --> name of the window
create_utils_session () {

    local win_name="${1}"

    if [[ -z "$win_name" ]]; then
        win_name="general"
    fi

    if ! tmux has-session -t utils 2>/dev/null; then
        tmux new-session -ds utils -n "${win_name}"
    fi
}

create_utils_proot_window () {

    if ! tmux has-session -t utils:proot 2>/dev/null; then
        # there is no proot window
        if ! tmux has-session -t utils 2>/dev/null; then
            # there are no utils session
            # so create the session too
            create_utils_session proot
        else
            # create the proot window
            tmux new-window -d -t utils -n proot
        fi

        tmux send-keys -t utils:proot "proot-distro login --shared-tmp archlinux \
            --bind /data/data/com.termux/files/home:/home/daniel" Enter \
            "cd /home/daniel" Enter "/usr/sbin/sshd" Enter "su daniel" Enter \
            "printf \"\033[5A\033[31;1m  Proot Instance: Don't use this instance directly,\n      \
            instead ssh into this instance.\n\"" Enter
    fi

}

create_utils_music_window () {

    if ! tmux has-session -t utils:music 2>/dev/null; then
        # there is no music window
        if ! tmux has-session -t utils 2>/dev/null; then
            # there are no utils session
            # so create the session too
            create_utils_session music
        else
            # create the music window
            tmux new-window -d -t utils -n music
        fi
        tmux send-keys -t utils:music "stm" Enter
    fi
}

create_session () {

    local session="${1}"
    local session_name="${2}"
    local parent_from_home="${3}"

    cd "$HOME/${parent_from_home}/$(basename "$session")"
    tmux new-session -ds $session_name
    if [ -f $HOME/.config/tss/startup/$session_name ]; then
        # running the start up script for this session, if it exists.
        # first arg will be the $session_name second will be the relative
        # path from home
        . $HOME/.config/tss/startup/$session_name $session_name "${parent_from_home}/$(basename "$session")"
    else
        # else 0th window will be the terminal
        # and 1st will be the nvim
        tmux new-window -t$session_name
        tmux send-keys -t$session_name:1 "nvim" Enter
        tmux new-window -t$session_name
        tmux send-keys -t$session_name:2 "w3m duckduckgo.com" Enter

        # switching to the 0th window, if you want to switch to a different
        # window write a startup script for the session
        tmux switch-client -t$session_name:0
    fi
}

create_session_from_dir () {

    local session
    local last_session
    local session_name
    local is_tmux_running
    local parent_from_home
    local suffix_hash

    session=$(tr ":" "\n" <<<"$Work_Dirs" \
        | xargs -I {} find -L {} -maxdepth 1 -type d \
        | sed "1d" \
        | fzf)

    if [[ -z $session ]]; then
        last_session=$(tmux display-message -p "#{@_last_session}")
        if [[ ! -z $last_session ]]; then
            tmux switch-client -t$last_session
        fi
        exit 1
    fi

    is_tmux_running=$(pgrep tmux)

    # if tmux is running check for the session
    # if session exist switch to the session
    # else start the session and switch to it

    session_name=$(basename "$session" | tr " " "_")

    parent_from_home=$(sed "s#^${HOME}/##" <<<"$session")
    parent_from_home=${parent_from_home%/*}
    suffix_hash=$(tr "/" "." <<<"$parent_from_home")

    if [[ ! -z "${Session_Suffix_Table[${suffix_hash}]}" ]]; then
        session_name="${session_name}-${Session_Suffix_Table[${suffix_hash}]}"
    else
        session_name="${session_name}-$(tr "." "_" <<<"$suffix_hash")"
    fi

    if [[ ! -z $TMUX || ! -z $is_tmux_running ]]; then
        # tmux is running
        echo tmux is running
        if ! tmux has-session -t$session_name 2>/dev/null; then
            create_session "$session" "$session_name" "$parent_from_home"
        fi

        if [[ -z $TMUX ]]; then
            tmux attach
        fi

    else
        # tmux is not running
        echo tmux is not running
        create_session "$session" "$session_name" "$parent_from_home"
        tmux attach
    fi

    tmux switch-client -t$session_name
    tmux previous-layout

}

main () {

    local last_creation
    local arg

    if [[ $# == 0 ]]; then
        create_session_from_dir
        exit 0
    fi

    for arg in "${@}"
    do
        case "$arg" in
            utils)
                create_utils_session
                last_creation="utils"
                ;;
            utils:proot)
                create_utils_proot_window
                last_creation="utils:proot"
                ;;
            utils:music)
                create_utils_music_window
                last_creation="utils:music"
                ;;
            general)
                create_general_session
                last_creation="general:0"
                ;;
            *)
                echo Umm, what are you doing ?
                ;;
        esac
    done

    if [[ -z $TMUX && ! -z "$last_creation" ]]; then
        tmux attach -t "$last_creation"
    elif [[ ! -z "$last_creation" ]]; then
        tmux switch-client -t "$last_creation"
    fi
}

main "${@}"
exit 0
